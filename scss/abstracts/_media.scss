///
/// Get operator of an expression
///
/// @param {String} $expression
/// @return {String} - Any of `>=`, `>`, `<=`, `<`
///
@function get-si-expression-operator($expression)
{
    @each $operator in ('>=', '>', '<=', '<')
    {
        @if str-index($expression, $operator)
        {
            @return $operator;
        }
    }

    @error "No operator found in : `#{$expression}`.";
}


///
/// Get dimension prefix based on an operator
///
/// @param {String} $operator
/// @return {String} - `min` or `max`
///
@function get-si-expression-prefix($operator)
{
    @return if(index(('<', '<='), $operator), 'max', 'min');
}


//
// Get dimension of an expression, based on a found operator
//
// @param {String} $expression
// @param {String} $operator
//
// @return {String} - `width` or `height` (or potentially anything else)
//
@function get-si-expression-dimension($expression, $operator)
{
    $dimension: str-slice($expression, 0, str-index($expression, $operator) - 1);

    @if str-length($dimension) == 0
    {
        $dimension: 'width';
    }

    @return $dimension;
}



///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit)
{
    $units: ('px': 1px, '%': 1%, 'em': 1em, 'rem': 1rem, 'vw': 1vw, 'vh': 1vh);

    @if not index(map-keys($units), $unit)
    {
        @error "Invalid unit : `#{$unit}`.";
    }

    @return $value * map-get($units, $unit);
}

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////


///
/// Casts a string into a $si-abstracts-media-expressionsnumber
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value)
{
    @if type-of($value) == 'number'
    {
        @return $value;
    }
    @else if type-of($value) != 'string'
    {
        @error "Value for `to-number` should be a number or a string.";
    }

    $first-character: str-slice($value, 1, 1);
    $result: 0;
    $digits: 0;
    $minus: ($first-character == '-');
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    // Remove +/- sign if present at first character
    @if ($first-character == '+' or $first-character == '-')
    {
        $value: str-slice($value, 2);
    }

    @for $i from 1 through str-length($value)
    {
        $character: str-slice($value, $i, $i);

        @if not (index(map-keys($numbers), $character) or $character == '.')
        {
            @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }

        @if $character == '.'
        {
            $digits: 1;
        }
        @else if $digits == 0
        {
            $result: $result * 10 + map-get($numbers, $character);
        }
        @else
        {
            $digits: $digits * 10;
            $result: $result + map-///
            /// Parse an expression to return a valid media-query expression
            ///
            /// @param {String} $expression - Expression to parse
            ///
            /// @return {String} - Valid media query
            ///get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}


@function get-si-expression-value($expression, $operator)
{
    $value: str-slice($expression, str-index($expression, $operator) + str-length($operator));

    $value: to-number($value);


    //
    // Defines a number to add or subtract for each unit when declaring a breakpoint with an interval
    //
    // @example scss - $si-media-unit-intervals:('px': 1);
    //  @include si-media('>150px') {} generates css => @media (min-width: 151px) {}
    //
    $si-media-unit-intervals:
    (
        'px': 1,
        'em': 0.01,
        'rem': 0.1,
        '': 0
    );

    $interval: map-get($si-media-unit-intervals, unit($value));

    @if not $interval {
        @error "Unknown unit : `#{$value}`.";
    }

    @if $operator == '>'
    {
        $value: $value + $interval;
    }
    @else if $operator == '<'
    {
        $value: $value - $interval;
    }

    @return $value;
}





///
/// Slice `$list` between `$start` and `$end` indexes
///
/// @access private
///
/// @param {List} $list - List to slice
/// @param {Number} $start [1] - Start index
/// @param {Number} $end [length($list)] - End index
///
/// @return {List} Sliced list
///
@function slice($list, $start: 1, $end: length($list))
{
    @if length($list) < 1 or $start > $end
    {
        @return ();
    }

    $result: ();

    @for $i from $start through $end
    {
        $result: append($result, nth($list, $i));
    }

    @return $result;
}

///
/// Parse an expression to return a valid media-query expression
///
/// @param {String} $expression - Expression to parse
///
/// @return {String} - Valid media query
///
@function si-parse-expression($expression) {
    ///@if $expression != #{xs!all}
       /// @error'(#{$expression})';
        @debug "#{$expression}";
    $operator-reference: ('and', ',', 'only', ' not ');
    $operator-regex: ('&', '|', '+', '!');
    $interval: false;
    $operator: '';

    @for $i from 1 through length($operator-regex)
    {

        $tmp: str-index($expression,nth($operator-regex, $i));

        @if $tmp
        {
            @if (not $interval and $tmp) or ($tmp and $interval < $tmp) {
                $interval: $tmp;
                $operator: nth($operator-reference, $i)
            }
        }
    }

    @if $interval
    {
        @return si-parse-expression(str-slice($expression, 0, $interval - 1)) + $operator + si-parse-expression(str-slice($expression, $interval + 1));
    }

    @if map-has-key($si-abstracts-media-expressions, $expression)
    {
        @return map-get($si-abstracts-media-expressions, $expression);
    }

    $operator: get-si-expression-operator($expression);
    $prefix: get-si-expression-prefix($operator);
    $dimension: get-si-expression-dimension($expression, $operator);
    $value: get-si-expression-value($expression, $operator);

    @return '(#{$prefix}-#{$dimension}: #{$value})';
}


///
/// Generates a media query based on a list of conditions
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @example scss
///  @include media('>=350px') { }
///

@mixin si-media($conditions...)
{
    @if length($conditions) == 0  or (length($conditions) == 1 and nth($conditions, 1) == null)
    {
        @content;
    }
    @else if (length($conditions) > 0)
    {
        @media #{unquote(si-parse-expression(nth($conditions, 1)))}
        {
            @include si-media(slice($conditions, 2)...)
            {
                @content;
            }
        }
    }
}
